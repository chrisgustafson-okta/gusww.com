/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
import { __awaiter } from "tslib";
import { Injectable, Injector, Inject } from '@angular/core';
import { Router, NavigationStart } from '@angular/router';
import { filter } from 'rxjs/operators';
import { OktaAuth } from '@okta/okta-auth-js';
import { OKTA_CONFIG } from './models/okta.config';
export class OktaAuthGuard {
    constructor(config, oktaAuth, injector) {
        this.config = config;
        this.oktaAuth = oktaAuth;
        this.injector = injector;
        this.updateAuthStateListener = (authState) => {
            if (!authState.isAuthenticated) {
                this.handleLogin(this.state.url);
            }
        };
        this.onAuthRequired = this.config.onAuthRequired;
        // Unsubscribe updateAuthStateListener when route change
        const router = injector.get(Router);
        router.events.pipe(filter((e) => e instanceof NavigationStart && this.state && this.state.url !== e.url)).subscribe(() => {
            this.oktaAuth.authStateManager.unsubscribe(this.updateAuthStateListener);
        });
    }
    canLoad(route, segments) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.onAuthRequired = ((_a = route.data) === null || _a === void 0 ? void 0 : _a.onAuthRequired) || this.onAuthRequired;
            const isAuthenticated = yield this.oktaAuth.isAuthenticated();
            if (isAuthenticated) {
                return true;
            }
            const originalUri = segments[0].path;
            yield this.handleLogin(originalUri);
            return false;
        });
    }
    /**
     * Gateway for protected route. Returns true if there is a valid accessToken,
     * otherwise it will cache the route and start the login flow.
     * @param route
     * @param state
     */
    canActivate(route, state) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            // Track states for current route
            this.state = state;
            this.onAuthRequired = ((_a = route.data) === null || _a === void 0 ? void 0 : _a.onAuthRequired) || this.onAuthRequired;
            // Protect the route after accessing
            this.oktaAuth.authStateManager.subscribe(this.updateAuthStateListener);
            const isAuthenticated = yield this.oktaAuth.isAuthenticated();
            if (isAuthenticated) {
                return true;
            }
            yield this.handleLogin(state.url);
            return false;
        });
    }
    canActivateChild(route, state) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.canActivate(route, state);
        });
    }
    handleLogin(originalUri) {
        return __awaiter(this, void 0, void 0, function* () {
            // Store the current path
            this.oktaAuth.setOriginalUri(originalUri);
            if (this.onAuthRequired) {
                this.onAuthRequired(this.oktaAuth, this.injector);
            }
            else {
                this.oktaAuth.signInWithRedirect();
            }
        });
    }
}
OktaAuthGuard.decorators = [
    { type: Injectable }
];
OktaAuthGuard.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [OKTA_CONFIG,] }] },
    { type: OktaAuth },
    { type: Injector }
];
//# sourceMappingURL=okta.guard.js.map